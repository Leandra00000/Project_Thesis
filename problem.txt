/******************************************************************************
* Copyright (C) 2010 - 2022 Xilinx, Inc.  All rights reserved.
* Copyright (C) 2022 - 2023 Advanced Micro Devices, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/*****************************************************************************/
/**
 *
 * @file xaxidma_example_simple_poll.c
 *
 * This file demonstrates how to use the xaxidma driver on the Xilinx AXI
 * DMA core (AXIDMA) to transfer packets in polling mode when the AXI DMA core
 * is configured in simple mode.
 *
 * This code assumes a loopback hardware widget is connected to the AXI DMA
 * core for data packet loopback.
 *
 * To see the debug print, you need a Uart16550 or uartlite in your system,
 * and please set "-DDEBUG" in your compiler options. You need to rebuild your
 * software executable.
 *
 *
 * <pre>
 * MODIFICATION HISTORY:
 *
 * Ver   Who  Date     Changes
 * ----- ---- -------- -------------------------------------------------------
 * 4.00a rkv  02/22/11 New example created for simple DMA, this example is for
 *       	       simple DMA
 * 5.00a srt  03/06/12 Added Flushing and Invalidation of Caches to fix CRs
 *		       648103, 648701.
 *		       Added V7 DDR Base Address to fix CR 649405.
 * 6.00a srt  03/27/12 Changed API calls to support MCDMA driver.
 * 7.00a srt  06/18/12 API calls are reverted back for backward compatibility.
 * 7.01a srt  11/02/12 Buffer sizes (Tx and Rx) are modified to meet maximum
 *		       DDR memory limit of the h/w system built with Area mode
 * 7.02a srt  03/01/13 Updated DDR base address for IPI designs (CR 703656).
 * 9.1   adk  01/07/16 Updated DDR base address for Ultrascale (CR 799532) and
 *		       removed the defines for S6/V6.
 * 9.3   ms   01/23/17 Modified xil_printf statement in main function to
 *                     ensure that "Successfully ran" and "Failed" strings are
 *                     available in all examples. This is a fix for CR-965028.
 *       ms   04/05/17 Modified Comment lines in functions to
 *                     recognize it as documentation block for doxygen
 *                     generation of examples.
 * 9.9   rsp  01/21/19 Fix use of #elif check in deriving DDR_BASE_ADDR.
 * 9.10  rsp  09/17/19 Fix cache maintenance ops for source and dest buffer.
 * 9.14  sk   03/08/22 Delete DDR memory limits comments as they are not
 * 		       relevant to this driver version.
 * 9.15  sa   08/12/22 Updated the example to use latest MIG cannoical define
 * 		       i.e XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR.
 * 9.16  sa   09/29/22 Fix infinite loops in the example.
 * </pre>
 *
 * ***************************************************************************

 */
/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"
#include "sleep.h"
#include "xiltimer.h"
#include <stdio.h>

#if defined(XPAR_UARTNS550_0_BASEADDR)
#include "xuartns550_l.h"       /* to use uartns550 */
#endif

/******************** Constant Definitions **********************************/

/*
 * Device hardware build related constants.
 */

#ifndef SDT
#define DMA_DEV_ID_0 XPAR_AXIDMA_0_DEVICE_ID
#define DMA_DEV_ID_1 XPAR_AXIDMA_1_DEVICE_ID
#define DMA_DEV_ID_2 XPAR_AXIDMA_2_DEVICE_ID
#define DMA_DEV_ID_3 XPAR_AXIDMA_3_DEVICE_ID
#define DMA_DEV_ID_4 XPAR_AXIDMA_4_DEVICE_ID
#define DMA_DEV_ID_5 XPAR_AXIDMA_5_DEVICE_ID
#define DMA_DEV_ID_6 XPAR_AXIDMA_6_DEVICE_ID
#define DMA_DEV_ID_7 XPAR_AXIDMA_7_DEVICE_ID

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#elif defined (XPAR_MIG7SERIES_0_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG7SERIES_0_BASEADDR
#elif defined (XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR
#elif defined (XPAR_PSU_DDR_0_S_AXI_BASEADDR)
#define DDR_BASE_ADDR	XPAR_PSU_DDR_0_S_AXI_BASEADDR
#endif

#else

#ifdef XPAR_MEM0_BASEADDRESS
#define DDR_BASE_ADDR		XPAR_MEM0_BASEADDRESS
#endif
#endif

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR		0x01000000
#else
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x004FFFFF)

#define RX_TOTAL_SIZE       0x80000000U       // 2GB
#define RX_DMA_COUNT        4
#define RX_PER_DMA_SIZE     (RX_TOTAL_SIZE / RX_DMA_COUNT)  // 0x20000000 = 512MB

#define RX_BUFFER_BASE_4(i)   ((MEM_BASE_ADDR + ((i) * RX_PER_DMA_SIZE)))


#define TEST_START_VALUE	0xC

#define NUMBER_OF_TRANSFERS	10
#define POLL_TIMEOUT_COUNTER    1000000U

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif


int XAxiDma_SimplePollExample(int Dma_read, int Dma_store, int Tries, int MAX_PKT_LEN);

static int CheckData(u8 *base, int num_transfers, int MAX_PKT_LEN);
int Single_DMA_Pool();
int Store_All_DMAS_parallel(int Tries, int MAX_PKT_LEN);
int Store_All_DMAS_serial(int Tries, int MAX_PKT_LEN);
int All_DMA_Pool();

/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
XAxiDma AxiDma[8];
XTime tStart, tEnd;
XTime tStart_1, tEnd_1;
XTime tStart_2, tEnd_2;
XTime tStart_3, tEnd_3;
XTime tStart_4, tEnd_4;
float total_time=0;
int total_cycles=0;



#ifndef SDT
int XAxiDma_Initialization(u16 DeviceId, int DMA)
#else
int XAxiDma_Initialization(UINTPTR BaseAddress, int DMA)
#endif
{
	XAxiDma_Config *CfgPtr;
	int Status;

	/* Initialize the XAxiDma device.
	 */
#ifndef SDT
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
#else
	CfgPtr = XAxiDma_LookupConfig(BaseAddress);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", BaseAddress);
		return XST_FAILURE;
	}
#endif

	Status = XAxiDma_CfgInitialize(&AxiDma[DMA], CfgPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if (XAxiDma_HasSg(&AxiDma[DMA])) {
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode
	 */
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}





/*****************************************************************************/
/**
* The entry point for this example. It invokes the example function,
* and reports the execution status.
*
* @param	None.
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main()
{
	int Status,Status0,Status1,Status2,Status3,Status4,Status5,Status6,Status7;


	xil_printf("\r\n--- Entering main() --- \r\n");

	/* Run the poll example for simple transfer */
#ifndef SDT
	Status0 = XAxiDma_Initialization(DMA_DEV_ID_0,0);
    Status1 = XAxiDma_Initialization(DMA_DEV_ID_1,1);
    Status2 = XAxiDma_Initialization(DMA_DEV_ID_2,2);
    Status3 = XAxiDma_Initialization(DMA_DEV_ID_3,3);
    Status4 = XAxiDma_Initialization(DMA_DEV_ID_4,4);
    Status5 = XAxiDma_Initialization(DMA_DEV_ID_5,5);
    Status6 = XAxiDma_Initialization(DMA_DEV_ID_6,6);
    Status7 = XAxiDma_Initialization(DMA_DEV_ID_7,7);
    
#else
	Status0 = XAxiDma_Initialization(XPAR_XAXIDMA_0_BASEADDR,0);
    Status1 = XAxiDma_Initialization(XPAR_XAXIDMA_1_BASEADDR,1);
    Status2 = XAxiDma_Initialization(XPAR_XAXIDMA_2_BASEADDR,2);
    Status3 = XAxiDma_Initialization(XPAR_XAXIDMA_3_BASEADDR,3);
    Status4 = XAxiDma_Initialization(XPAR_XAXIDMA_4_BASEADDR,4);
    Status5 = XAxiDma_Initialization(XPAR_XAXIDMA_5_BASEADDR,5);
    Status6 = XAxiDma_Initialization(XPAR_XAXIDMA_6_BASEADDR,6);
    Status7 = XAxiDma_Initialization(XPAR_XAXIDMA_7_BASEADDR,7);
    
    
#endif

	if (Status0 != XST_SUCCESS || Status1 != XST_SUCCESS || Status2 != XST_SUCCESS || Status3 != XST_SUCCESS || Status4 != XST_SUCCESS || Status5 != XST_SUCCESS || Status6 != XST_SUCCESS || Status7 != XST_SUCCESS) {
		xil_printf("XAxiDma_SimplePoll Example Failed\r\n");
		return XST_FAILURE;
	}
   
    Status = Single_DMA_Pool();
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }

   /* 
    Status = XAxiDma_SimplePollExample(1,0,200,1024);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    */
    /*

    Status= Store_All_DMAS_parallel(1,131072);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }

    Status= Store_All_DMAS_serial(1,131072);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
  */

    Status= All_DMA_Pool();
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }


	xil_printf("Successfully ran XAxiDma_SimplePoll Example\r\n");

	xil_printf("--- Exiting main() --- \r\n");

	return XST_SUCCESS;

}

#if defined(XPAR_UARTNS550_0_BASEADDR)
/*****************************************************************************/
/*
*
* Uart16550 setup routine, need to set baudrate to 9600, and data bits to 8
*
* @param	None.
*
* @return	None
*
* @note		None.
*
******************************************************************************/
static void Uart550_Setup(void)
{

	/* Set the baudrate to be predictable
	 */
	XUartNs550_SetBaud(XPAR_UARTNS550_0_BASEADDR,
			   XPAR_XUARTNS550_CLOCK_HZ, 9600);

	XUartNs550_SetLineControlReg(XPAR_UARTNS550_0_BASEADDR,
				     XUN_LCR_8_DATA_BITS);

}
#endif


void PrintRxData(u8 *base, int num_transfers, int packet_size) {
    xil_printf("\n--- DMA Buffer Contents ---\n");
    for (int i = 0; i < num_transfers; i++) {
        u8 *ptr = base + i * packet_size;
        xil_printf("Transfer %d:\n", i);
        for (int j = 0; j < packet_size; j++) {
            xil_printf("0x%02X ", ptr[j]);
            if ((j + 1) % 16 == 0) xil_printf("\r\n");
        }
        xil_printf("\r\n");
    }
}

/*****************************************************************************/
/**
* The example to do the simple transfer through polling. The constant
* NUMBER_OF_TRANSFERS defines how many times a simple transfer is repeated.
*
* @param	DeviceId is the Device Id of the XAxiDma instance
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if error occurs
*
* @note		None
*
*
******************************************************************************/

int XAxiDma_SimplePollExample(int Dma_read, int Dma_store, int Tries, int MAX_PKT_LEN)
{
	XAxiDma_Config *CfgPtr;
	int Status;
	int Index;
	u8 *TxBufferPtr;
	u8 *RxBufferPtr;
	u8 Value;
	int TimeOut = POLL_TIMEOUT_COUNTER;
    float duration_cycles;
    float duration_us;
    double delay_us;

	TxBufferPtr = (u8 *)TX_BUFFER_BASE ;
	RxBufferPtr = (u8 *)RX_BUFFER_BASE;


	Value = TEST_START_VALUE;

	for (Index = 0; Index < MAX_PKT_LEN; Index ++) {
		TxBufferPtr[Index] = Value;

		Value = (Value + 1) & 0xFF;
	}
	/* Flush the buffers before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((UINTPTR)TxBufferPtr, MAX_PKT_LEN);
	Xil_DCacheFlushRange((UINTPTR)RxBufferPtr, MAX_PKT_LEN*Tries);

    
	for (Index = 0; Index < Tries; Index ++) {   

        Status = XAxiDma_SimpleTransfer(&AxiDma[Dma_read], (UINTPTR) TxBufferPtr,
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }
        usleep(2);
        XTime_GetTime(&tStart);
		Status = XAxiDma_SimpleTransfer(&AxiDma[Dma_store], (UINTPTR) RxBufferPtr,
						MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}
                        

		/*Wait till tranfer is done or 1usec * 10^6 iterations of timeout occurs*/
		while (TimeOut) {
			if (!(XAxiDma_Busy(&AxiDma[Dma_store], XAXIDMA_DEVICE_TO_DMA))){
				break;
			}
			TimeOut--;
			usleep(1U);
		}
        XTime_GetTime(&tEnd);

        while (TimeOut) {
			if (!(XAxiDma_Busy(&AxiDma[Dma_read], XAXIDMA_DMA_TO_DEVICE))) {
				break;
			}
			TimeOut--;
			usleep(1U);
		}
        duration_cycles=2*(tEnd- tStart);
        duration_us=1.0*(tEnd- tStart) * 1000000/(COUNTS_PER_SECOND);
        total_time += duration_us;
        total_cycles += duration_cycles;
        //printf("Execution took %.2f clock cycles. Operation number %d.\n", duration_cycles,Index);
        //printf("Output took %.2f us.\n",duration_us);

		
        RxBufferPtr+=MAX_PKT_LEN;
        //usleep(100);
        

	}
    //Status = CheckData((u8 *)RX_BUFFER_BASE,Tries,MAX_PKT_LEN);
    //if (Status != XST_SUCCESS) {
    //    return XST_FAILURE;
    //}
    //PrintRxData((u8 *)RX_BUFFER_BASE, Tries, MAX_PKT_LEN);
    printf("MAX_PKT_LEN = %d, ", MAX_PKT_LEN);
    printf("Bandwith = %.6f MB/s, ", (Tries * MAX_PKT_LEN)/total_time);
    printf("Average time per operation = %.6f us\n", total_time / Tries);

    total_time=0;
    total_cycles=0;

	/* Test finishes successfully
	 */
	return XST_SUCCESS;
}



/*****************************************************************************/
/*
*
* This function checks data buffer after the DMA transfer is finished.
*
* @param	None
*
* @return
*		- XST_SUCCESS if validation is successful.
*		- XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
static int CheckData(u8 *base, int num_transfers, int MAX_PKT_LEN)
{
	u8 *RxPacket;
	int Index = 0;
	u8 Value;
    int transfer =0;

	RxPacket = (u8 *) base;
	Value = TEST_START_VALUE;

	/* Invalidate the DestBuffer before receiving the data, in case the
	 * Data Cache is enabled
	 */
	Xil_DCacheInvalidateRange((UINTPTR)RxPacket, MAX_PKT_LEN*num_transfers);

    for (transfer=0; transfer< num_transfers; transfer++){
        for (Index = 0; Index < MAX_PKT_LEN; Index++) {
            if (RxPacket[Index] != Value) {
                xil_printf("Data error %d: %x/%x\r\n",
                    Index, (unsigned int)RxPacket[Index],
                    (unsigned int)Value);

                return XST_FAILURE;
            }
            Value = (Value + 1) & 0xFF;
        }
        Value = TEST_START_VALUE;
        RxPacket += MAX_PKT_LEN;
    }
	return XST_SUCCESS;
}

int Store_All_DMAS_parallel(int Tries, int MAX_PKT_LEN) {
    int Status;
    int i, t;
    u8 *TxBufferPtr[4];
    int TimeOut = POLL_TIMEOUT_COUNTER;
    u8 *RxBufferPtr[4];
    float duration_us;
    u8 Value;
    int Index;

    RxBufferPtr[0] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(0);
    RxBufferPtr[1] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(1);
    RxBufferPtr[2] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(2);
    RxBufferPtr[3] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(3);

    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[0], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[1], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[2], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[3], MAX_PKT_LEN*Tries);

    TxBufferPtr[0] = (u8 *)TX_BUFFER_BASE ;
    TxBufferPtr[1] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN;
    TxBufferPtr[2] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN*2;
    TxBufferPtr[3] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN*3;

	Value = TEST_START_VALUE;

    for (i = 0; i < 4; i ++) {
        for (Index = 0; Index < MAX_PKT_LEN; Index ++) {
            TxBufferPtr[i][Index] = Value;

            Value = (Value + 1) & 0xFF;
        }
        Value = TEST_START_VALUE;
    }



    for (t = 0; t < Tries; t++) {

        Status = XAxiDma_SimpleTransfer(&AxiDma[1], (UINTPTR) TxBufferPtr[0],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[3], (UINTPTR) TxBufferPtr[1],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[5], (UINTPTR) TxBufferPtr[2],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[7], (UINTPTR) TxBufferPtr[3],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }
        usleep(2);

        XTime_GetTime(&tStart);
    
        Status = XAxiDma_SimpleTransfer(&AxiDma[0],(UINTPTR)RxBufferPtr[0],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[2],(UINTPTR)RxBufferPtr[1],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[4],(UINTPTR)RxBufferPtr[2],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[6],(UINTPTR)RxBufferPtr[3],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        // Wait until DMA is done or timeout
        while (TimeOut) {
            if (!XAxiDma_Busy(&AxiDma[0], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[2], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[4], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[6], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[1], XAXIDMA_DMA_TO_DEVICE) &&
                !XAxiDma_Busy(&AxiDma[3], XAXIDMA_DMA_TO_DEVICE) &&
                !XAxiDma_Busy(&AxiDma[5], XAXIDMA_DMA_TO_DEVICE) &&
                !XAxiDma_Busy(&AxiDma[7], XAXIDMA_DMA_TO_DEVICE)) {
                break;
            }

            TimeOut--;
            usleep(1);
        }
        
        
     
        XTime_GetTime(&tEnd);

        duration_us=1.0*(tEnd- tStart) * 1000000/(COUNTS_PER_SECOND);
        total_time += duration_us;

        RxBufferPtr[0] += MAX_PKT_LEN;
        RxBufferPtr[1] += MAX_PKT_LEN;
        RxBufferPtr[2] += MAX_PKT_LEN;
        RxBufferPtr[3] += MAX_PKT_LEN;

        
    }

    printf("MAX_PKT_LEN = %d, \n", MAX_PKT_LEN);
    //printf("Bandwith = %.6f MB/s\n", (Tries * MAX_PKT_LEN*4)/total_time);
    
    printf("Average Parallel total time for 4 DMA transfers = %.6f us\n", total_time/Tries);  
    
    total_time=0;
    total_cycles=0;

    return XST_SUCCESS;
}



int Store_All_DMAS_serial(int Tries, int MAX_PKT_LEN) {
    int Status;
    int i, t;
    u8 *TxBufferPtr[4];
    int TimeOut = POLL_TIMEOUT_COUNTER;
    u8 *RxBufferPtr[4];
    float duration_us;
    u8 Value;
    int Index;

    RxBufferPtr[0] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(0);
    RxBufferPtr[1] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(1);
    RxBufferPtr[2] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(2);
    RxBufferPtr[3] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(3);

    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[0], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[1], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[2], MAX_PKT_LEN*Tries);
    Xil_DCacheFlushRange((UINTPTR)RxBufferPtr[3], MAX_PKT_LEN*Tries);

    TxBufferPtr[0] = (u8 *)TX_BUFFER_BASE ;
    TxBufferPtr[1] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN;
    TxBufferPtr[2] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN*2;
    TxBufferPtr[3] = (u8 *)TX_BUFFER_BASE + MAX_PKT_LEN*3;

	Value = TEST_START_VALUE;

    for (i = 0; i < 4; i ++) {
        for (Index = 0; Index < MAX_PKT_LEN; Index ++) {
            TxBufferPtr[i][Index] = Value;

            Value = (Value + 1) & 0xFF;
        }
        Value = TEST_START_VALUE;
    }



    for (t = 0; t < Tries; t++) {

        Status = XAxiDma_SimpleTransfer(&AxiDma[1], (UINTPTR) TxBufferPtr[0],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[3], (UINTPTR) TxBufferPtr[1],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[5], (UINTPTR) TxBufferPtr[2],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[7], (UINTPTR) TxBufferPtr[3],
						MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
            return XST_FAILURE;
        }
        usleep(2);

        XTime_GetTime(&tStart);
    
        Status = XAxiDma_SimpleTransfer(&AxiDma[0],(UINTPTR)RxBufferPtr[0],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        while (TimeOut) {
            if (!(XAxiDma_Busy(&AxiDma[0], XAXIDMA_DEVICE_TO_DMA) )) {
                break;
            }
            TimeOut--;
            usleep(1);
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[2],(UINTPTR)RxBufferPtr[1],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        while (TimeOut) {
            if (!(XAxiDma_Busy(&AxiDma[2], XAXIDMA_DEVICE_TO_DMA) )) {
                break;
            }
            TimeOut--;
            usleep(1);
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma[4],(UINTPTR)RxBufferPtr[2],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        while (TimeOut) {
            if (!(XAxiDma_Busy(&AxiDma[4], XAXIDMA_DEVICE_TO_DMA) )) {
                break;
            }
            TimeOut--;
            usleep(1);
        }
        
        Status = XAxiDma_SimpleTransfer(&AxiDma[6],(UINTPTR)RxBufferPtr[3],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
        if (Status != XST_SUCCESS) {
            xil_printf("Transfer Failed\r\n");
            return XST_FAILURE;
        }

        while (TimeOut) {
            if (!(XAxiDma_Busy(&AxiDma[6], XAXIDMA_DEVICE_TO_DMA) )) {
                break;
            }
            TimeOut--;
            usleep(1);
        }

        // Wait until DMA is done or timeout
        
        XTime_GetTime(&tEnd);
        
        while (TimeOut) {
			if (!(XAxiDma_Busy(&AxiDma[1], XAXIDMA_DMA_TO_DEVICE)) && !(XAxiDma_Busy(&AxiDma[3], XAXIDMA_DMA_TO_DEVICE)) && !(XAxiDma_Busy(&AxiDma[5], XAXIDMA_DMA_TO_DEVICE))&& !(XAxiDma_Busy(&AxiDma[7], XAXIDMA_DMA_TO_DEVICE))) {
				break;
			}
			TimeOut--;
			usleep(1U);
		}

        duration_us=1.0*(tEnd- tStart) * 1000000/(COUNTS_PER_SECOND);
        total_time += duration_us;

        RxBufferPtr[0] += MAX_PKT_LEN;
        RxBufferPtr[1] += MAX_PKT_LEN;
        RxBufferPtr[2] += MAX_PKT_LEN;
        RxBufferPtr[3] += MAX_PKT_LEN;

        
    }

    printf("MAX_PKT_LEN = %d, \n", MAX_PKT_LEN);
    //printf("Bandwith = %.6f MB/s\n", (Tries * MAX_PKT_LEN*4)/total_time);
    
    printf("Average Serial total time for 4 DMA transfers = %.6f us\n", total_time/Tries);  
    
    total_time=0;
    total_cycles=0;

    return XST_SUCCESS;
}






int Single_DMA_Pool(){

    int Status;

    Status = XAxiDma_SimplePollExample(1,0,200,32);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,64);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,128);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,256);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,512);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = XAxiDma_SimplePollExample(1,0,200,1024);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = XAxiDma_SimplePollExample(1,0,200,2048);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,4096);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,8192);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = XAxiDma_SimplePollExample(1,0,200,16384);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = XAxiDma_SimplePollExample(1,0,200,32768);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,65536);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,131072);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,262144);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,524288);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,1048576);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,1048576*2);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,1048576*4);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = XAxiDma_SimplePollExample(1,0,200,1048576*8);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }

    return XST_SUCCESS;    
}


int All_DMA_Pool(){

    int Status;

    Status = Store_All_DMAS_parallel(50,32);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,64);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,128);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,256);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,512);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = Store_All_DMAS_parallel(50,1024);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = Store_All_DMAS_parallel(50,2048);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,4096);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,8192);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = Store_All_DMAS_parallel(50,16384);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    
    Status = Store_All_DMAS_parallel(50,32768);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,65536);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,131072);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    /*
    Status = Store_All_DMAS_parallel(50,262144);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,524288);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,1048576);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,1048576*2);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,1048576*4);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    Status = Store_All_DMAS_parallel(50,1048576*8);
    if (Status != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    */

    return XST_SUCCESS;    
}

