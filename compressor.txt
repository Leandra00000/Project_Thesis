/******************************************************************************
* Copyright (C) 2010 - 2022 Xilinx, Inc.  All rights reserved.
* Copyright (C) 2022 - 2023 Advanced Micro Devices, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/*****************************************************************************/
/**
 *
 * @file xaxidma_example_simple_poll.c
 *
 * This file demonstrates how to use the xaxidma driver on the Xilinx AXI
 * DMA core (AXIDMA) to transfer packets in polling mode when the AXI DMA core
 * is configured in simple mode.
 *
 * This code assumes a loopback hardware widget is connected to the AXI DMA
 * core for data packet loopback.
 *
 * To see the debug print, you need a Uart16550 or uartlite in your system,
 * and please set "-DDEBUG" in your compiler options. You need to rebuild your
 * software executable.
 *
 *
 * <pre>
 * MODIFICATION HISTORY:
 *
 * Ver   Who  Date     Changes
 * ----- ---- -------- -------------------------------------------------------
 * 4.00a rkv  02/22/11 New example created for simple DMA, this example is for
 *       	       simple DMA
 * 5.00a srt  03/06/12 Added Flushing and Invalidation of Caches to fix CRs
 *		       648103, 648701.
 *		       Added V7 DDR Base Address to fix CR 649405.
 * 6.00a srt  03/27/12 Changed API calls to support MCDMA driver.
 * 7.00a srt  06/18/12 API calls are reverted back for backward compatibility.
 * 7.01a srt  11/02/12 Buffer sizes (Tx and Rx) are modified to meet maximum
 *		       DDR memory limit of the h/w system built with Area mode
 * 7.02a srt  03/01/13 Updated DDR base address for IPI designs (CR 703656).
 * 9.1   adk  01/07/16 Updated DDR base address for Ultrascale (CR 799532) and
 *		       removed the defines for S6/V6.
 * 9.3   ms   01/23/17 Modified xil_printf statement in main function to
 *                     ensure that "Successfully ran" and "Failed" strings are
 *                     available in all examples. This is a fix for CR-965028.
 *       ms   04/05/17 Modified Comment lines in functions to
 *                     recognize it as documentation block for doxygen
 *                     generation of examples.
 * 9.9   rsp  01/21/19 Fix use of #elif check in deriving DDR_BASE_ADDR.
 * 9.10  rsp  09/17/19 Fix cache maintenance ops for source and dest buffer.
 * 9.14  sk   03/08/22 Delete DDR memory limits comments as they are not
 * 		       relevant to this driver version.
 * 9.15  sa   08/12/22 Updated the example to use latest MIG cannoical define
 * 		       i.e XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR.
 * 9.16  sa   09/29/22 Fix infinite loops in the example.
 * </pre>
 *
 * ***************************************************************************

 */
/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"
#include "sleep.h"
#include "xiltimer.h"
#include <stdio.h>
#include <math.h>
#include <time.h>


#if defined(XPAR_UARTNS550_0_BASEADDR)
#include "xuartns550_l.h"       /* to use uartns550 */
#endif

/******************** Constant Definitions **********************************/

/*
 * Device hardware build related constants.
 */

#ifndef SDT
#define DMA_DEV_ID		XPAR_AXIDMA_0_DEVICE_ID

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#elif defined (XPAR_MIG7SERIES_0_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG7SERIES_0_BASEADDR
#elif defined (XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR
#elif defined (XPAR_PSU_DDR_0_S_AXI_BASEADDR)
#define DDR_BASE_ADDR	XPAR_PSU_DDR_0_S_AXI_BASEADDR
#endif

#else

#ifdef XPAR_MEM0_BASEADDRESS
#define DDR_BASE_ADDR		XPAR_MEM0_BASEADDRESS
#endif
#endif

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR		0x01000000
#else
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x1000000)
#endif

#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x004FFFFF)

#define MAX_PKT_LEN		4*13

#define TEST_START_VALUE	0xC

#define NUMBER_OF_TRANSFERS	10

#define NUMBER_OF_TRANSFERS_1KB	    1024/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_2KB	    2048/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_4KB	    4096/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_8KB	    8192/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_16KB	16384/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_32KB	32768/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_64KB	65536/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_128KB	131072/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_256KB	262144/MAX_PKT_LEN
#define NUMBER_OF_TRANSFERS_512KB	524288/MAX_PKT_LEN

#define POLL_TIMEOUT_COUNTER    1000000U

#define XAXIDMA_BUFFLEN_OFFSET   0x00000028


/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

#ifndef SDT
int XAxiDma_SimplePollExample(u16 DeviceId);
#else
int XAxiDma_SimplePollExample(UINTPTR BaseAddress);
#endif
/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
XAxiDma AxiDma;
 XTime tStart, tEnd;
float total_time=0;
int total_cycles=0;
struct timespec ts;


/*****************************************************************************/
/**
* The entry point for this example. It invokes the example function,
* and reports the execution status.
*
* @param	None.
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main()
{
	int Status;

	xil_printf("\r\n--- Entering main() --- \r\n");

	/* Run the poll example for simple transfer */
#ifndef SDT
	Status = XAxiDma_SimplePollExample(DMA_DEV_ID);
#else
	Status = XAxiDma_SimplePollExample(XPAR_XAXIDMA_0_BASEADDR);
#endif

	if (Status != XST_SUCCESS) {
		xil_printf("XAxiDma_SimplePoll Example Failed\r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully ran XAxiDma_SimplePoll Example\r\n");

	xil_printf("--- Exiting main() --- \r\n");

	return XST_SUCCESS;

}

#if defined(XPAR_UARTNS550_0_BASEADDR)
/*****************************************************************************/
/*
*
* Uart16550 setup routine, need to set baudrate to 9600, and data bits to 8
*
* @param	None.
*
* @return	None
*
* @note		None.
*
******************************************************************************/
static void Uart550_Setup(void)
{

	/* Set the baudrate to be predictable
	 */
	XUartNs550_SetBaud(XPAR_UARTNS550_0_BASEADDR,
			   XPAR_XUARTNS550_CLOCK_HZ, 9600);

	XUartNs550_SetLineControlReg(XPAR_UARTNS550_0_BASEADDR,
				     XUN_LCR_8_DATA_BITS);

}
#endif


void PrintRxData(u8 *base, int num_transfers, int packet_size) {
    xil_printf("\n--- DMA Buffer Contents ---\n");
    for (int i = 0; i < num_transfers; i++) {
        u8 *ptr = base + i * packet_size;
        xil_printf("Transfer %d:\n", i);
        for (int j = 0; j < packet_size; j++) {
            xil_printf("0x%02X ", ptr[j]);
            if ((j + 1) % 16 == 0) xil_printf("\r\n");
        }
        xil_printf("\r\n");
    }
}


void SaveTransferStatsToFile(float total_time, float total_cycles, int Tries) {
    char filename[64];
    snprintf(filename, sizeof(filename), "%d.txt", MAX_PKT_LEN);

    FILE *fp = fopen(filename, "w");
    if (fp == NULL) {
        printf("Failed to open file: %s\n", filename);
        return;
    }

    fprintf(fp, "MAX_PKT_LEN = %d\n", MAX_PKT_LEN);
    fprintf(fp, "Transfers performed = %d\n", Tries);
    fprintf(fp, "Total time = %.6f us\n", total_time);
    fprintf(fp, "Average time per operation = %.6f us\n", total_time / Tries);
    fprintf(fp, "Average time per Byte = %.6f us\n", total_time / (Tries * MAX_PKT_LEN));
    fprintf(fp, "Average cycles per Byte = %.6f cycles\n", total_cycles / (Tries * MAX_PKT_LEN));

    fclose(fp);
    printf("Stats saved to %s\n", filename);
}

int my_ceil(double x) {
    int xi = (int)x;
    if (x == (double)xi) {
        return xi;
    } else if (x > 0) {
        return xi + 1;
    } else {
        return xi;
    }
}

int align_up(int value, int alignment) {
    int remainder = value % alignment;
    if (remainder == 0)
        return value;  // Already aligned
    else
        return value + (alignment - remainder);  // Round up to next multiple
}

/*****************************************************************************/
/**
* The example to do the simple transfer through polling. The constant
* NUMBER_OF_TRANSFERS defines how many times a simple transfer is repeated.
*
* @param	DeviceId is the Device Id of the XAxiDma instance
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if error occurs
*
* @note		None
*
*
******************************************************************************/
#ifndef SDT
int XAxiDma_SimplePollExample(u16 DeviceId)
#else
int XAxiDma_SimplePollExample(UINTPTR BaseAddress)
#endif
{
	XAxiDma_Config *CfgPtr;
	int Status;
	int Tries = 10;
	int Index;
	u8 *RxBufferPtr;
    int aligned_bytes;

	int TimeOut = POLL_TIMEOUT_COUNTER;
    int i;

	RxBufferPtr = (u8 *)RX_BUFFER_BASE;
    u32 BytesTransferred;

	/* Initialize the XAxiDma device.
	 */
#ifndef SDT
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
#else
	CfgPtr = XAxiDma_LookupConfig(BaseAddress);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", BaseAddress);
		return XST_FAILURE;
	}
#endif

	Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if (XAxiDma_HasSg(&AxiDma)) {
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode
	 */
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DMA_TO_DEVICE);


    Xil_DCacheInvalidateRange((UINTPTR)RX_BUFFER_BASE, Tries * (MAX_PKT_LEN +10));



    Xil_Out32(XPAR_IMAGE_GENERATOR_0_BASEADDR, 0x01);

    // 2. Optional: confirm it's actually enabled
    //u32 spw_status = Xil_In32(XPAR_SPW_GEN_0_BASEADDR);
    //xil_printf("SpW Status = 0x%08x\n", spw_status);
    

    //usleep(1U+(unsigned int)ceil(0.1 * MAX_PKT_LEN));

	for (Index = 0; Index < Tries; Index ++) {
              
		Status = XAxiDma_SimpleTransfer(&AxiDma, (UINTPTR) RxBufferPtr,
						MAX_PKT_LEN +10, XAXIDMA_DEVICE_TO_DMA);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

        while (TimeOut) {
			if (!(XAxiDma_Busy(&AxiDma, XAXIDMA_DEVICE_TO_DMA))) {
				break;
			}
			//TimeOut--;
			usleep(1U);
		}

        BytesTransferred = XAxiDma_ReadReg( AxiDma.RegBase, XAXIDMA_RX_OFFSET+XAXIDMA_BUFFLEN_OFFSET );
        xil_printf("Bytes: %d\r\n", BytesTransferred);
             

        Xil_DCacheInvalidateRange((UINTPTR)RxBufferPtr, BytesTransferred);
        
        xil_printf("Received Data:\r\n");
        for (i = 0; i < BytesTransferred; i++) {
             xil_printf("0x%02X ", RxBufferPtr[i]);
             if ((i + 1) % 16 == 0) {
                 xil_printf("\r\n");
             }
        }
        xil_printf("\r\n");
        int aligned_bytes = align_up(BytesTransferred, 4);
        xil_printf("aligned_bytes: %d\r\n", aligned_bytes);
        RxBufferPtr+=aligned_bytes;


	}

    /* Test finishes successfully
	 */
	return XST_SUCCESS;
}

