/******************************************************************************
Data Handler Architecture with a Multiple Compression Units (150 MHz)
******************************************************************************/

/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"
#include "sleep.h"
#include "xiltimer.h"
#include <stdio.h>
#include <stdbool.h>

#if defined(XPAR_UARTNS550_0_BASEADDR)
#include "xuartns550_l.h"       /* to use uartns550 */
#endif

/******************** Constant Definitions **********************************/

/*
 * Device hardware build related constants.
 */

#ifndef SDT
#define DMA_DEV_ID_0 XPAR_AXIDMA_0_DEVICE_ID
#define DMA_DEV_ID_1 XPAR_AXIDMA_1_DEVICE_ID
#define DMA_DEV_ID_2 XPAR_AXIDMA_2_DEVICE_ID
#define DMA_DEV_ID_3 XPAR_AXIDMA_3_DEVICE_ID
#define DMA_DEV_ID_4 XPAR_AXIDMA_4_DEVICE_ID
#define DMA_DEV_ID_5 XPAR_AXIDMA_5_DEVICE_ID

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#elif defined (XPAR_MIG7SERIES_0_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG7SERIES_0_BASEADDR
#elif defined (XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR
#elif defined (XPAR_PSU_DDR_0_S_AXI_BASEADDR)
#define DDR_BASE_ADDR	XPAR_PSU_DDR_0_S_AXI_BASEADDR
#endif

#else

#ifdef XPAR_MEM0_BASEADDRESS
#define DDR_BASE_ADDR		XPAR_MEM0_BASEADDRESS
#endif
#endif

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR		0x01000000
#else
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x004FFFFF)

#define RX_TOTAL_SIZE       0x80000000U       // 2GB
//#define RX_TOTAL_SIZE  (16*4 * 1024)  // 16 KB = 16 Ã— 1024 bytes     
#define RX_DMA_COUNT        4
#define RX_PER_DMA_SIZE     (RX_TOTAL_SIZE / RX_DMA_COUNT)  // 0x20000000 = 512MB

#define RX_BUFFER_BASE_4(i)   ((MEM_BASE_ADDR + ((i) * RX_PER_DMA_SIZE)))

#define RX_COMPRESSION_BUFFER  (MEM_BASE_ADDR + RX_TOTAL_SIZE)



#define NUMBER_OF_IMAGES_PER_DMA 50

#define PACKET_SIZE  65536
#define SIZE_OF_IMAGE 8388608

#define NUMBER_OF_TRANSFERS_PER_IMAGE	 SIZE_OF_IMAGE/PACKET_SIZE
#define TOTAL_NUMBER_OF_TRANSFERS  NUMBER_OF_TRANSFERS_PER_IMAGE*NUMBER_OF_IMAGES_PER_DMA*4

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif


int Store_All_DMAS_parallel(int Tries, int MAX_PKT_LEN);
void PrintMemoryData_Interleaved(bool Show_Content);


struct ImagesPosition{
    u8 *StartingPtr;
    int NumBytes;    
};

struct ImagesPosition TableOfImages[TOTAL_NUMBER_OF_TRANSFERS];
int NumOfImagesOnTable=0;
/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
XAxiDma AxiDma[4];



/************************** Functions ****************************************/



/*****************************************************************************/
/**
* Initializes a DMA in simple mode with no interruptors
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
******************************************************************************/
#ifndef SDT
int XAxiDma_Initialization(u16 DeviceId, int DMA)
#else
int XAxiDma_Initialization(UINTPTR BaseAddress, int DMA)
#endif
{
	XAxiDma_Config *CfgPtr;
	int Status;

	/* Initialize the XAxiDma device.
	 */
#ifndef SDT
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
#else
	CfgPtr = XAxiDma_LookupConfig(BaseAddress);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", BaseAddress);
		return XST_FAILURE;
	}
#endif

	Status = XAxiDma_CfgInitialize(&AxiDma[DMA], CfgPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if (XAxiDma_HasSg(&AxiDma[DMA])) {
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode
	 */
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}



/*****************************************************************************/
/**
* The entry point for this example. It invokes the example function,
* and reports the execution status.
*
* @param	None.
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main()
{
	int Status[RX_DMA_COUNT];

#ifndef SDT
	Status[0] = XAxiDma_Initialization(DMA_DEV_ID_0,0);
    Status[1] = XAxiDma_Initialization(DMA_DEV_ID_1,1);
    Status[2] = XAxiDma_Initialization(DMA_DEV_ID_2,2);
    Status[3] = XAxiDma_Initialization(DMA_DEV_ID_3,3);
    
#else
	Status[0] = XAxiDma_Initialization(XPAR_XAXIDMA_0_BASEADDR,0);
    Status[1] = XAxiDma_Initialization(XPAR_XAXIDMA_1_BASEADDR,1);
    Status[2] = XAxiDma_Initialization(XPAR_XAXIDMA_2_BASEADDR,2);
    Status[3] = XAxiDma_Initialization(XPAR_XAXIDMA_3_BASEADDR,3);   
    
#endif

    //Verify if initialization was successful
    for (int i=0; i<RX_DMA_COUNT; i++){
        if (Status[i] != XST_SUCCESS){
            xil_printf("Failed to Initialize DMA %d\r\n", i);
		    return XST_FAILURE;            
        }
    }
   
    xil_printf("Entering Storing\r\n");
    Status[0]= Store_Compressed_Images(NUMBER_OF_TRANSFERS_PER_IMAGE*NUMBER_OF_IMAGES_PER_DMA,PACKET_SIZE);
    if (Status[0] != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }
    PrintMemoryData_Interleaved(false);

	xil_printf("Successfull Execution\r\n");

	return XST_SUCCESS;

}

#if defined(XPAR_UARTNS550_0_BASEADDR)
/*****************************************************************************/
/*
*
* Uart16550 setup routine, need to set baudrate to 9600, and data bits to 8
*
* @param	None.
*
* @return	None
*
* @note		None.
*
******************************************************************************/
static void Uart550_Setup(void)
{

	/* Set the baudrate to be predictable
	 */
	XUartNs550_SetBaud(XPAR_UARTNS550_0_BASEADDR,
			   XPAR_XUARTNS550_CLOCK_HZ, 9600);

	XUartNs550_SetLineControlReg(XPAR_UARTNS550_0_BASEADDR,
				     XUN_LCR_8_DATA_BITS);

}
#endif



/*****************************************************************************/
/**
 * Prints the contents of a DMA receive buffer in hexadecimal format.
 *
 * This function iterates through the received DMA buffer memory and prints
 * each packet's contents for debugging or verification purposes. Each packet
 * is printed in a structured format, showing 16 bytes per line.
 *
 * @param	base             Pointer to the start of the DMA buffer.
 * @param	num_transfers    Number of packet transfers to print.
 * @param	packet_size      Size (in bytes) of each DMA packet.
 * @param	num_DMA          DMA channel index (used only for display labeling).
 *
 * @return	None.
 *
 * @note
 *  - This function is intended for debugging.
 *  - The function assumes linear contiguous memory for the DMA buffer!
 *
 ******************************************************************************/
void PrintRxData(u8 *base, int num_transfers, int packet_size, int num_DMA) {
    xil_printf("\n--- DMA Buffer Contents %d ---\n", num_DMA);
    for (int i = 0; i < num_transfers; i++) {
        u8 *ptr = base + i * packet_size;
        xil_printf("Transfer %d:\n", i);
        for (int j = 0; j < packet_size; j++) {
            xil_printf("0x%02X ", ptr[j]);
            if ((j + 1) % 16 == 0) xil_printf("\r\n");
        }
        xil_printf("\r\n");
    }
}




/*****************************************************************************/
/**
 * Prints information about all interleaved DMA image partitions.
 *
 * This function iterates through all DMA channels (`RX_DMA_COUNT`) and prints
 * metadata for each image reconstructed from multiple partitions stored in
 * `TableOfImages`. Each partition of each DMA is the DMA index plus 4.
 *
 * For each DMA:
 *  - Prints the list of image partitions handled by that DMA.
 *  - For each image:
 *      - Computes the total number of bytes across all partitions of that image.
 *      - Displays the start address of the first partition in memory.
 *      - Optionally prints the raw hexadecimal content of all partitions.
 *
 * @param Show_Content
 *        If `true`, prints the raw memory contents (in hexadecimal format)
 *        for each image partition. If `false`, only metadata is printed.
 *
 * @note
 *  - The `TableOfImages` array must be organized such that data from each DMA
 *    and partition follows the indexing pattern:
 *      @code
 *      idx = Dma + part*RX_DMA_COUNT + img*NUMBER_OF_TRANSFERS_PER_IMAGE*RX_DMA_COUNT
 *      @endcode
 *    This reflects the interleaved ordering of images and DMA outputs.
 *
 *  - This function is mainly for debugging or validating that image data from
 *    multiple DMAs and partitions is being stored correctly and contiguously.
 *
 ******************************************************************************/
void PrintMemoryData_Interleaved(bool Show_Content) {
    for(int Dma = 0; Dma < RX_DMA_COUNT; Dma++)  {  
        xil_printf("\n--- DMA %d Partitions ---\n", Dma);

        int num_images = NUMBER_OF_IMAGES_PER_DMA;

        for (int img = 0; img < num_images; img++) {
            xil_printf("Image %d:\n", img);

            // Start address of the first partition for this DMA
            u8 *start_ptr = TableOfImages[Dma + img*RX_DMA_COUNT*NUMBER_OF_TRANSFERS_PER_IMAGE].StartingPtr;

            // Sum total bytes across all partitions
            int total_bytes = 0;
            for (int part = 0; part < NUMBER_OF_TRANSFERS_PER_IMAGE; part++) {
                int idx = Dma + part*RX_DMA_COUNT + img*NUMBER_OF_TRANSFERS_PER_IMAGE*RX_DMA_COUNT;
                total_bytes += TableOfImages[idx].NumBytes;
                //xil_printf("Bytes: %d\r\n", TableOfImages[idx].NumBytes);
            }

            xil_printf("Start Address: 0x%08X\r\n", (unsigned int)start_ptr);
            xil_printf("Total Bytes: %d\r\n", total_bytes);

            // print content across partitions
            if (Show_Content) {
                for (int part = 0; part < NUMBER_OF_TRANSFERS_PER_IMAGE; part++) {
                    int idx = Dma + part*RX_DMA_COUNT + img*NUMBER_OF_TRANSFERS_PER_IMAGE*RX_DMA_COUNT;
                    u8 *ptr = TableOfImages[idx].StartingPtr;
                    int part_bytes = TableOfImages[idx].NumBytes;

                    for (int j = 0; j < part_bytes; j++) {
                        xil_printf("%02X ", ptr[j]);
                        if ((j + 1) % 16 == 0) xil_printf("\r\n");
                    }
                }
            }

            xil_printf("\r\n----------------------------------\r\n");
        }
    }
}


/*****************************************************************************/
/**
 * Rounds a given integer value up to the nearest multiple of a specified alignment.
 *
 * @param   value       The integer value to align.
 * @param   alignment   The alignment boundary (must be > 0). Typically a power of two.
 *
 * @return  The smallest integer >= value that is a multiple of alignment.
 *
 * @example
 *  int size = 30;
 *  int aligned = align_up(size, 16);  // aligned = 32
 *
 ******************************************************************************/
int align_up(int value, int alignment) {
    int remainder = value % alignment;
    if (remainder == 0)
        return value;  // Already aligned
    else
        return value + (alignment - remainder);  // Round up to next multiple
}




int Store_Compressed_Images(int Tries, int MAX_PKT_LEN) {
    int Status;
    int i, t;
    int DMA_Id;
    u8 *RxBufferPtr[RX_DMA_COUNT];
    u32 BytesTransferred[RX_DMA_COUNT];

    //Set memory addresses to store into memory    
    for(i=0; i< RX_DMA_COUNT; i++){
       RxBufferPtr[i] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(i);         
    }

    //Start the generation of images in the FPGA
    Xil_Out32(XPAR_INSTRUMENTS_STARTER_0_BASEADDR, 0x01);

    for (t = 0; t < Tries; t++) {
    
        //Tranfers into memory
        for (DMA_Id= 0; DMA_Id<RX_DMA_COUNT; DMA_Id++){
            Status = XAxiDma_SimpleTransfer(&AxiDma[DMA_Id],(UINTPTR)RxBufferPtr[DMA_Id],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
            if (Status != XST_SUCCESS) {
                xil_printf("Transfer Failed\r\n");
                return XST_FAILURE;
            }
        }

        // Wait until DMA is done or timeout
        while (1) {
            if (!XAxiDma_Busy(&AxiDma[0], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[1], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[2], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[3], XAXIDMA_DEVICE_TO_DMA)
                ) {
                break;
            }
        }

        for (DMA_Id = 0; DMA_Id < RX_DMA_COUNT; DMA_Id++) {
            // Read the number of bytes actually transferred by each DMA channel
            BytesTransferred[DMA_Id] = XAxiDma_ReadReg(AxiDma[DMA_Id].RegBase,XAXIDMA_RX_OFFSET + XAXIDMA_BUFFLEN_OFFSET);

            // Store transfer info into the TableOfImages
            TableOfImages[NumOfImagesOnTable + DMA_Id].NumBytes   = BytesTransferred[DMA_Id];
            TableOfImages[NumOfImagesOnTable + DMA_Id].StartingPtr = RxBufferPtr[DMA_Id];

            // Advance buffer pointer, aligned to 16 bytes
            RxBufferPtr[DMA_Id] += align_up(BytesTransferred[DMA_Id], 16);
        }


        NumOfImagesOnTable+=4;  
    }

    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(0), Tries, MAX_PKT_LEN, 0); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(1), Tries, MAX_PKT_LEN, 1); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(2), Tries, MAX_PKT_LEN, 2); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(3), Tries, MAX_PKT_LEN, 3); 


    return XST_SUCCESS;
}


