/******************************************************************************
Data Handler Architecture with a Single Compression Unit (With a single starter) (150 MHz)
******************************************************************************/

/***************************** Include Files *********************************/
#include "xaxidma.h"
#include "xparameters.h"
#include "xdebug.h"
#include "sleep.h"
#include "xiltimer.h"
#include <stdio.h>

#if defined(XPAR_UARTNS550_0_BASEADDR)
#include "xuartns550_l.h"       /* to use uartns550 */
#endif

/******************** Constant Definitions **********************************/

/*
 * Device hardware build related constants.
 */

#ifndef SDT
#define DMA_DEV_ID_0 XPAR_AXIDMA_0_DEVICE_ID
#define DMA_DEV_ID_1 XPAR_AXIDMA_1_DEVICE_ID
#define DMA_DEV_ID_2 XPAR_AXIDMA_2_DEVICE_ID
#define DMA_DEV_ID_3 XPAR_AXIDMA_3_DEVICE_ID
#define DMA_DEV_ID_4 XPAR_AXIDMA_4_DEVICE_ID

#ifdef XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#elif defined (XPAR_MIG7SERIES_0_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG7SERIES_0_BASEADDR
#elif defined (XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR)
#define DDR_BASE_ADDR	XPAR_MIG_0_C0_DDR4_MEMORY_MAP_BASEADDR
#elif defined (XPAR_PSU_DDR_0_S_AXI_BASEADDR)
#define DDR_BASE_ADDR	XPAR_PSU_DDR_0_S_AXI_BASEADDR
#endif

#else

#ifdef XPAR_MEM0_BASEADDRESS
#define DDR_BASE_ADDR		XPAR_MEM0_BASEADDRESS
#endif
#endif

#ifndef DDR_BASE_ADDR
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
DEFAULT SET TO 0x01000000
#define MEM_BASE_ADDR		0x01000000
#else
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x1000000)
#endif

#define TX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x004FFFFF)

#define RX_TOTAL_SIZE       0x40000000U       // 1GB
//#define RX_TOTAL_SIZE  (16 * 1024)  // 16 KB = 16 Ã— 1024 bytes     
#define RX_DMA_COUNT        4 
#define RX_PER_DMA_SIZE     (RX_TOTAL_SIZE / RX_DMA_COUNT)  // 0x20000000 = 256MB

#define RX_BUFFER_BASE_4(i)   ((MEM_BASE_ADDR + ((i) * RX_PER_DMA_SIZE)))

#define RX_COMPRESSION_BUFFER  (MEM_BASE_ADDR + RX_TOTAL_SIZE)



#define TEST_START_VALUE	0xC

#define POLL_TIMEOUT_COUNTER    1000000U

#define SIZE_OF_IMAGE 8388608//1024//8388608 // (8MB, 2048x2048x2Bytes)
#define NUMBER_OF_IMAGES_PER_DMA 10 // (8MB, 2048x2048x2Bytes)

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

int Store_Images(int Tries, int MAX_PKT_LEN);
int Compression();


/************************** Variable Definitions *****************************/

// 4 DMAs for memory transfer (0-3) and 1 for Compression (4)
XAxiDma AxiDma[5];   

//Stores the starting position on memory and the number of bytes stored
struct ImagesPosition{
    u8 *StartingPtr;
    int NumBytes;    
};

struct ImagesPosition TableOfImages[NUMBER_OF_IMAGES_PER_DMA*4];  // Vector of images
int NumOfImagesOnTable=0; 





/************************** Functions ****************************************/



/*****************************************************************************/
/**
* Initializes a DMA in simple mode with no interruptors
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
******************************************************************************/
#ifndef SDT
int XAxiDma_Initialization(u16 DeviceId, int DMA)
#else
int XAxiDma_Initialization(UINTPTR BaseAddress, int DMA)
#endif
{
	XAxiDma_Config *CfgPtr;
	int Status;

	/* Initialize the XAxiDma device.
	 */
#ifndef SDT
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
#else
	CfgPtr = XAxiDma_LookupConfig(BaseAddress);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", BaseAddress);
		return XST_FAILURE;
	}
#endif

	Status = XAxiDma_CfgInitialize(&AxiDma[DMA], CfgPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if (XAxiDma_HasSg(&AxiDma[DMA])) {
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode
	 */
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma[DMA], XAXIDMA_IRQ_ALL_MASK,
			    XAXIDMA_DMA_TO_DEVICE);

	return XST_SUCCESS;
}





/*****************************************************************************/
/**
* The entry point for this example. It invokes the example function,
* and reports the execution status.
*
* @param	None.
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main()
{
	int Status[RX_DMA_COUNT+1];


	xil_printf("\r\n--- Entering main() --- \r\n");

#ifndef SDT
	Status[0] = XAxiDma_Initialization(DMA_DEV_ID_0,0);
    Status[1]= XAxiDma_Initialization(DMA_DEV_ID_1,1);
    Status[2] = XAxiDma_Initialization(DMA_DEV_ID_2,2);
    Status[3] = XAxiDma_Initialization(DMA_DEV_ID_3,3);
    Status[4] = XAxiDma_Initialization(DMA_DEV_ID_4,4);
    
#else
	Status[0] = XAxiDma_Initialization(XPAR_XAXIDMA_0_BASEADDR,0);
    Status[1] = XAxiDma_Initialization(XPAR_XAXIDMA_1_BASEADDR,1);
    Status[2] = XAxiDma_Initialization(XPAR_XAXIDMA_2_BASEADDR,2);
    Status[3] = XAxiDma_Initialization(XPAR_XAXIDMA_3_BASEADDR,3);
    Status[4] = XAxiDma_Initialization(XPAR_XAXIDMA_4_BASEADDR,4); //Compressor
    
    
#endif

    //Verify if initialization was successful
    for (int i=0; i<RX_DMA_COUNT+1; i++){
        if (Status[i] != XST_SUCCESS){
            xil_printf("Failed to Initialize DMA %d\r\n", i);
		    return XST_FAILURE;            
        }
    }
   
    //Storing
    xil_printf("Entering Storing\r\n");
    Status[0]= Store_Images(NUMBER_OF_IMAGES_PER_DMA*SIZE_OF_IMAGE/128,128);
    if (Status[0] != XST_SUCCESS) {
        xil_printf("DMA transfers failed.\r\n");
        return XST_FAILURE;
    }

    //Compression
    xil_printf("Entering Compression\r\n");
    Status[0]= Compression();
    if (Status[0] != XST_SUCCESS) {
        xil_printf("DMA transfer failed Compression.\r\n");
        return XST_FAILURE;
    }

	xil_printf("Successfull Execution\r\n");

	return XST_SUCCESS;

}

#if defined(XPAR_UARTNS550_0_BASEADDR)
/*****************************************************************************/
/*
*
* Uart16550 setup routine, need to set baudrate to 9600, and data bits to 8
*
* @param	None.
*
* @return	None
*
* @note		None.
*
******************************************************************************/
static void Uart550_Setup(void)
{

	/* Set the baudrate to be predictable
	 */
	XUartNs550_SetBaud(XPAR_UARTNS550_0_BASEADDR,
			   XPAR_XUARTNS550_CLOCK_HZ, 9600);

	XUartNs550_SetLineControlReg(XPAR_UARTNS550_0_BASEADDR,
				     XUN_LCR_8_DATA_BITS);

}
#endif


/*****************************************************************************/
/**
 * Prints the contents of a DMA receive buffer in hexadecimal format.
 *
 * This function iterates through the received DMA buffer memory and prints
 * each packet's contents for debugging or verification purposes. Each packet
 * is printed in a structured format, showing 16 bytes per line.
 *
 * @param	base             Pointer to the start of the DMA buffer.
 * @param	num_transfers    Number of packet transfers to print.
 * @param	packet_size      Size (in bytes) of each DMA packet.
 * @param	num_DMA          DMA channel index (used only for display labeling).
 *
 * @return	None.
 *
 * @note
 *  - This function is intended for debugging.
 *  - The function assumes linear contiguous memory for the DMA buffer!
 *
 ******************************************************************************/
void PrintRxData(u8 *base, int num_transfers, int packet_size, int num_DMA) {
    xil_printf("\n--- DMA Buffer Contents %d ---\n", num_DMA);
    for (int i = 0; i < num_transfers; i++) {
        u8 *ptr = base + i * packet_size;
        xil_printf("Transfer %d:\n", i);
        for (int j = 0; j < packet_size; j++) {
            xil_printf("0x%02X ", ptr[j]);
            if ((j + 1) % 16 == 0) xil_printf("\r\n");
        }
        xil_printf("\r\n");
    }
}


/*****************************************************************************/
/**
 * Performs multiple parallel DMA transfers from the FPGA to DDR memory.
 *
 * This function coordinates multiple AXI DMA engines to simultaneously
 * transfer data from the FPGA into pre-defined DDR memory regions.
 * Each DMA channel writes to a distinct memory segment. 
 *
 * @param   num_transfers   Number of DMA transfers to perform per channel.
 * @param   MAX_PKT_LEN     Size (in bytes) of each transfer packet.
 *
 * @return
 *          - XST_SUCCESS if all transfers complete successfully.
 *          - XST_FAILURE if any DMA transfer initialization fails.
 *
 * @note
 *  - Each DMA channel must have been initialized prior to calling this function.
 *
 ******************************************************************************/
int Store_Images(int num_transfers, int MAX_PKT_LEN) {
    int Status;
    int DMA_Id, i;
    u8 *RxBufferPtr[RX_DMA_COUNT];

    //Set memory addresses to store into memory    
    for(i=0; i< RX_DMA_COUNT; i++){
       RxBufferPtr[i] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(i);         
    }

    //Start the generation of images in the FPGA
    Xil_Out32(XPAR_INSTRUMENTS_STARTER_0_BASEADDR, 0x01);


    for (int t = 0; t < num_transfers; t++) {
        
        //Tranfers into memory
        for (DMA_Id= 0; DMA_Id<RX_DMA_COUNT; DMA_Id++){
            Status = XAxiDma_SimpleTransfer(&AxiDma[DMA_Id],(UINTPTR)RxBufferPtr[DMA_Id],MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);
            if (Status != XST_SUCCESS) {
                xil_printf("Transfer Failed\r\n");
                return XST_FAILURE;
            }
        }
        
        // Wait until DMA is done or timeout
        while (1) {
            if (!XAxiDma_Busy(&AxiDma[0], XAXIDMA_DEVICE_TO_DMA) &&
                !XAxiDma_Busy(&AxiDma[1], XAXIDMA_DEVICE_TO_DMA) 
                //&&
                //!XAxiDma_Busy(&AxiDma[2], XAXIDMA_DEVICE_TO_DMA) 
                //&&
                //!XAxiDma_Busy(&AxiDma[3], XAXIDMA_DEVICE_TO_DMA)
                ) {
                break;
            }
        }

        //Update storage position
        for(i=0; i< RX_DMA_COUNT; i++){
            RxBufferPtr[i] += MAX_PKT_LEN;
        }
        
    }

    Xil_DCacheFlush();

    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(0), num_transfers, MAX_PKT_LEN, 0); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(1), num_transfers, MAX_PKT_LEN, 1); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(2), num_transfers, MAX_PKT_LEN, 2); 
    //PrintRxData((u8 *)(UINTPTR)RX_BUFFER_BASE_4(3), num_transfers, MAX_PKT_LEN, 3); 

    return XST_SUCCESS;
}


/*****************************************************************************/
/**
 * Rounds a given integer value up to the nearest multiple of a specified alignment.
 *
 * @param   value       The integer value to align.
 * @param   alignment   The alignment boundary (must be > 0). Typically a power of two.
 *
 * @return  The smallest integer >= value that is a multiple of alignment.
 *
 * @example
 *  int size = 30;
 *  int aligned = align_up(size, 16);  // aligned = 32
 *
 ******************************************************************************/
int align_up(int value, int alignment) {
    int remainder = value % alignment;
    if (remainder == 0)
        return value;  // Already aligned
    else
        return value + (alignment - remainder);  // Round up to next multiple
}



/*****************************************************************************/
/**
 * Prints the contents of all compressed images stored in memory.
 *
 * This function iterates through the global `TableOfImages` array, which
 * contains metadata (start pointer and size) for each compressed image. For
 * each image, it prints:
 *  - Image index
 *  - Start memory address
 *  - Number of bytes
 *  - Optionally, the hexadecimal content of the image (16 bytes per line)
 *    if the `Show_Content` parameter is true.
 *
 * @param   Show_Content  If true, prints the hexadecimal contents of each image.
 *
 * @param   None.
 *
 * @return  None.
 *
 * @note
 *  - Intended for debugging and verification of compressed image data.
 *
 ******************************************************************************/
void PrintCompressedImages(bool Show_Content)
{
    xil_printf("---- Printing Compressed Images ----\r\n");

    for (int i = 0; i < NumOfImagesOnTable; i++)
    {
        xil_printf("Image %d:\r\n", i);
        xil_printf("Start Address: 0x%08X\r\n", (unsigned int)TableOfImages[i].StartingPtr);
        xil_printf("NumBytes: %d\r\n", TableOfImages[i].NumBytes);

        // Print data in hex, 16 bytes per line
        if(Show_Content){
            for (int j = 0; j < TableOfImages[i].NumBytes; j++)
            {
                xil_printf("%02X ", TableOfImages[i].StartingPtr[j]);

                if ((j + 1) % 16 == 0)  // new line every 16 bytes
                    xil_printf("\r\n");
            }
        }        
        xil_printf("\r\n----------------------------------\r\n");
        
        
    }
}



/*****************************************************************************/
/**
 * Performs compression of images using a hardware accelerator via AXI DMA.
 *
 * This function transfers uncompressed image data to a compressor IP block 
 * and retrieves the compressed output back into a contiguous
 * memory buffer. Data for each compressed image is stored
 * in the global `TableOfImages` array for later inspection.
 *
 * @param   None
 *
 * @return
 *          - XST_SUCCESS if all transfers and compression complete successfully.
 *          - XST_FAILURE if any DMA transfer fails.
 *
 * @note
 *  - The function assumes that the DMA engine at index 4 (`AxiDma[4]`) is
 *    configured to interface with the compressor IP.
 *  - Memory addresses for uncompressed input are provided by `RX_BUFFER_BASE_4()`.
 *  - Compressed data is stored starting at `RX_COMPRESSION_BUFFER`.
 *  - Each transferâ€™s byte count is aligned to 16 bytes using `align_up()`.
 *
 ******************************************************************************/
int Compression()
{
	int Status;
	u8 *RxCompressorPtr, *RxBufferPtr[4];

    int i, numDMA;
    int aligned_bytes;

    RxBufferPtr[0] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(0);
    RxBufferPtr[1] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(1);
    RxBufferPtr[2] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(2);
    RxBufferPtr[3] = (u8 *)(UINTPTR)RX_BUFFER_BASE_4(3);
    
	RxCompressorPtr = (u8 *)RX_COMPRESSION_BUFFER;
    u32 BytesTransferred;


    for(i=0;i<NUMBER_OF_IMAGES_PER_DMA;i++) {           
        for(numDMA=0; numDMA<RX_DMA_COUNT; numDMA++){
            
            //Transfer data to Compressor
            Status = XAxiDma_SimpleTransfer(&AxiDma[4], (UINTPTR) RxBufferPtr[numDMA],
                            SIZE_OF_IMAGE, XAXIDMA_DMA_TO_DEVICE);
                            
            
            if (Status != XST_SUCCESS) {
                return XST_FAILURE;
            }

            RxBufferPtr[numDMA]+=SIZE_OF_IMAGE;


            //Receive data from compressor      
            Status = XAxiDma_SimpleTransfer(&AxiDma[4], (UINTPTR) RxCompressorPtr,
                            SIZE_OF_IMAGE*2, XAXIDMA_DEVICE_TO_DMA);

            if (Status != XST_SUCCESS) {
                return XST_FAILURE;
            }

            while (1) {
                if (!(XAxiDma_Busy(&AxiDma[4], XAXIDMA_DEVICE_TO_DMA))) {
                    break;
                }
                //TimeOut--;
                usleep(1U);
            }

            BytesTransferred = XAxiDma_ReadReg(AxiDma[4].RegBase, XAXIDMA_RX_OFFSET+XAXIDMA_BUFFLEN_OFFSET );
            aligned_bytes = align_up(BytesTransferred, 16);
            

            TableOfImages[NumOfImagesOnTable].NumBytes=BytesTransferred;
            TableOfImages[NumOfImagesOnTable].StartingPtr=RxCompressorPtr;
            NumOfImagesOnTable+=1; 

            RxCompressorPtr+=aligned_bytes;
        }
    }

    Xil_DCacheFlush();
    PrintCompressedImages(false);
	
	return XST_SUCCESS;
}


